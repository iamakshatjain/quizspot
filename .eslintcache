[{"/home/codespace/workspace/quizspot/src/index.tsx":"1","/home/codespace/workspace/quizspot/src/App.tsx":"2","/home/codespace/workspace/quizspot/src/firebase.tsx":"3","/home/codespace/workspace/quizspot/src/Login.tsx":"4","/home/codespace/workspace/quizspot/src/Tests.tsx":"5","/home/codespace/workspace/quizspot/src/mock-data.ts":"6","/home/codespace/workspace/quizspot/src/Rules.tsx":"7","/home/codespace/workspace/quizspot/src/Completed.tsx":"8","/home/codespace/workspace/quizspot/src/Questions.tsx":"9","/home/codespace/workspace/quizspot/src/types.ts":"10","/home/codespace/workspace/quizspot/src/dataUtils.ts":"11"},{"size":158,"mtime":1610631437451,"results":"12","hashOfConfig":"13"},{"size":1291,"mtime":1610993304178,"results":"14","hashOfConfig":"13"},{"size":487,"mtime":1610553388913,"results":"15","hashOfConfig":"13"},{"size":2705,"mtime":1610970800613,"results":"16","hashOfConfig":"13"},{"size":6199,"mtime":1610999400932,"results":"17","hashOfConfig":"13"},{"size":1820,"mtime":1611000918024,"results":"18","hashOfConfig":"13"},{"size":2114,"mtime":1610991000643,"results":"19","hashOfConfig":"13"},{"size":815,"mtime":1611000672887,"results":"20","hashOfConfig":"13"},{"size":4056,"mtime":1611001864609,"results":"21","hashOfConfig":"13"},{"size":1367,"mtime":1610972564436,"results":"22","hashOfConfig":"13"},{"size":1955,"mtime":1611001435344,"results":"23","hashOfConfig":"13"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},"fo6x93",{"filePath":"27","messages":"28","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"29","usedDeprecatedRules":"26"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"43","messages":"44","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"47"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/home/codespace/workspace/quizspot/src/index.tsx",[],["50","51"],"/home/codespace/workspace/quizspot/src/App.tsx",["52"],"import {useState} from 'react';\nimport {Login} from './Login';\nimport {Tests} from './Tests';\nimport {Rules} from './Rules';\nimport {Questions} from './Questions';\nimport {Completed} from './Completed';\n\nimport {User, Test, SelectedScreen} from './types';\n\n// TODO: apply routing till tests page (user must not be able to reach test with a link)\n// TODO: apply redux - priority\nconst selectedScreen: SelectedScreen  = (screen, setScreen, userDetails, setUserDetails) => {\n    switch(screen){\n        case 0: return <Login setScreen={setScreen} setUserDetails={setUserDetails}/>;\n        case 1: return <Tests setScreen={setScreen} userDetails={userDetails} setUserDetails={setUserDetails}/>;\n        case 2: return <Rules setScreen={setScreen}/>;\n        case 3: return <Questions setScreen={setScreen} userDetails={userDetails} setUserDetails={setUserDetails}/>;\n        case 4: return <Completed/>;\n        default: return <Login setScreen={setScreen} setUserDetails={setUserDetails}/>\n    }\n}\n\nexport const App = () => {\n    const [screen, setScreen] = useState<number>(0);\n    const [userDetails, setUserDetails] = useState<User>({} as User);\n\n    return (<div className=\"container\">\n                {selectedScreen(screen, setScreen, userDetails, setUserDetails)}\n            </div>);\n}","/home/codespace/workspace/quizspot/src/firebase.tsx",[],["53","54"],"/home/codespace/workspace/quizspot/src/Login.tsx",[],"/home/codespace/workspace/quizspot/src/Tests.tsx",[],"/home/codespace/workspace/quizspot/src/mock-data.ts",[],"/home/codespace/workspace/quizspot/src/Rules.tsx",[],"/home/codespace/workspace/quizspot/src/Completed.tsx",[],"/home/codespace/workspace/quizspot/src/Questions.tsx",["55"],"/home/codespace/workspace/quizspot/src/types.ts",[],["56","57"],"/home/codespace/workspace/quizspot/src/dataUtils.ts",[],{"ruleId":"58","replacedBy":"59"},{"ruleId":"60","replacedBy":"61"},{"ruleId":"62","severity":1,"message":"63","line":8,"column":15,"nodeType":"64","messageId":"65","endLine":8,"endColumn":19},{"ruleId":"58","replacedBy":"66"},{"ruleId":"60","replacedBy":"67"},{"ruleId":"68","severity":1,"message":"69","line":88,"column":8,"nodeType":"70","endLine":88,"endColumn":10,"suggestions":"71"},{"ruleId":"58","replacedBy":"72"},{"ruleId":"60","replacedBy":"73"},"no-native-reassign",["74"],"no-negated-in-lhs",["75"],"@typescript-eslint/no-unused-vars","'Test' is defined but never used.","Identifier","unusedVar",["74"],["75"],"react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'endTest', 'timeToEnd', and 'userDetails.pendingTests'. Either include them or remove the dependency array. You can also do a functional update 'setTimeToEnd(t => ...)' if you only need 'timeToEnd' in the 'setTimeToEnd' call.","ArrayExpression",["76"],["74"],["75"],"no-global-assign","no-unsafe-negation",{"desc":"77","fix":"78"},"Update the dependencies array to be: [endTest, timeToEnd, userDetails.pendingTests]",{"range":"79","text":"80"},[3341,3343],"[endTest, timeToEnd, userDetails.pendingTests]"]